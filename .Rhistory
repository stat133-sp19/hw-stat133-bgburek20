#'@export
#'@examples
#' bin_variable(5, .5)
bin_variable <- function(trials, prob){
check_trials(trials)
check_prob(prob)
lst <- list(trials = trials, prob = prob)
class(lst) = 'binvar'
lst
}
#'@export
print.binvar <- function(lst){
trials = lst$trials
prob = lst$prob
cat('"Binomial variable" \n',
'\n',
'Parameters \n',
'- number of trials:', trials, '\n',
'- prob of success :', prob)
invisible(lst)
}
summary.binvar <- function(lst){
trials = lst$trials
prob = lst$prob
cat('"Summary binomial" \n',
'\n',
'Parameters \n',
'- number of trials:', lst$trials, '\n',
'- prob of success :', lst$prob, '\n',
'\n',
'Measures \n',
'- mean     :', aux_mean(trials, prob), '\n',
'- variance :', aux_variance(trials, prob), '\n',
'- mode     :', aux_mode(trials, prob), '\n',
'- skewness :', aux_skewness(trials, prob), '\n',
'- kurtosis :', aux_kurtosis(trials, prob), '\n')
invisible(lst)
}
bin_mean <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
bin_variance <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_variance(trials, prob))
}
bin_mode <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_mode(trials, prob))
}
bin_skewness <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_skewness(trials, prob))
}
bin_kurtosis <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_kurtosis(trials, prob))
}
devtools:document()
devtools::document()
x = bin_distribution(trials = 5, prob = .69)
plot(x)
bin_distribution(trials = 5, prob = .69)
x = bin_distribution(trials = 5, prob = .69)
plot(x)
x = bin_cumulative(5, .69)
plot(x)
devtools:test_that()
devtools::test_that()
devtools::testthat()
devtools::build()
x = bin_variable(trials = 5, prob = .42)
x = bin_variable(trials = 5, prob = .42)
x
devtools::build()
x = bin.variable(5, .42)
x = bin_variable(5, .42)
summary(x)
gr
#' @import testthat
#' @import ggplot2
#' @import dplyr
@import stringr
#' @import testthat
#' @import ggplot2
#' @import dplyr
#'
@import stringr
#' @import testthat
#' @import ggplot2
#' @import dplyr
#'
#'
@import stringr
#' @import testthat
#' @import ggplot2
#' @import dplyr
#'
#'
#'
#' @import stringr
#' @import testthat
#' @import ggplot2
#' @import dplyr
bin_mean(5, .5)
bin_mode(5, .5)
bin_skewness(5, .69)
bin_kurtosis(5, 23)
bin_kurtosis(5, .23)
devtools:document()
devtools::document()
devtools::build()
devtools:build()
devtools::build()
#' @import testthat
library(binomial)
install.packages(binomial)
install.packages('binomial')
install.packages("binomial")
library(binomial)
devtools::build()
knitr::opts_chunk$set(collapse = T)
library(binomial)
knitr::opts_chunk$set(collapse = T)
library(binomial)
getwd()
knitr::opts_chunk$set(collapse = T)
library(binomial)
expect_length(bin_choose(5, 2), 1)
test_that("bin_choose() works as expected", {
expect_equal(bin_choose(5, 2), (factorial(5))/
(factorial(2) * factorial(5-2)))
expect_error(bin_choose(2, 5), "k cannot be greater than n")
expect_length(bin_choose(5, 2), 1)
})
test_that("bin_probability() works as expected", {
expect_equal(bin_probability(2, 5, .5),
bin_choose(5, 2) * .5 ** 2 * (1 - .5) ** (5 - 2))
expect_length(bin_probability(2, 5, .5), 1)
expect_length(bin_probability(0:2, 5, .5), 3)
expect_type(bin_probability(2, 5, .5), 'double')
})
test_that("bin_distribution() works as expected", {
frame <- bin_distribution(5, .5)
expect_equal(frame$success, c(0, 1, 2, 3, 4, 5))
expect_type(frame, 'list')
expect_length(frame, 2)
})
test_that("plot.bindis() works as expected", {
frame <- bin_distribution(5, .5)
frame2 <- bin_distribution(6, .6)
expect_type(plot(frame), 'list')
expect_length(plot(frame), 2)
expect_length(plot(frame2), 2)
})
test_that("bin_cumulative works as expected", {
frame <- bin_cumulative(5, .5)
expect_equal(frame$success, c(0, 1, 2, 3, 4, 5))
expect_type(frame, 'list')
expect_length(frame, 3)
})
context('Test Binomial Package')
test_that("bin_choose() works as expected", {
expect_equal(bin_choose(5, 2), (factorial(5))/
(factorial(2) * factorial(5-2)))
expect_error(bin_choose(2, 5), "k cannot be greater than n")
expect_length(bin_choose(5, 2), 1)
})
test_that("bin_probability() works as expected", {
expect_equal(bin_probability(2, 5, .5),
bin_choose(5, 2) * .5 ** 2 * (1 - .5) ** (5 - 2))
expect_length(bin_probability(2, 5, .5), 1)
expect_length(bin_probability(0:2, 5, .5), 3)
expect_type(bin_probability(2, 5, .5), 'double')
})
test_that("bin_distribution() works as expected", {
frame <- bin_distribution(5, .5)
expect_equal(frame$success, c(0, 1, 2, 3, 4, 5))
expect_type(frame, 'list')
expect_length(frame, 2)
})
expect_length(bin_choose(5, 2), 1)
test_that("bin_choose() works as expected", {
expect_equal(bin_choose(5, 2), (factorial(5))/
(factorial(2) * factorial(5-2)))
expect_error(bin_choose(2, 5), "k cannot be greater than n")
expect_length(bin_choose(5, 2), 1)
})
test_that("bin_probability() works as expected", {
expect_equal(bin_probability(2, 5, .5),
bin_choose(5, 2) * .5 ** 2 * (1 - .5) ** (5 - 2))
expect_length(bin_probability(2, 5, .5), 1)
expect_length(bin_probability(0:2, 5, .5), 3)
expect_type(bin_probability(2, 5, .5), 'double')
})
test_that("bin_distribution() works as expected", {
frame <- bin_distribution(5, .5)
expect_equal(frame$success, c(0, 1, 2, 3, 4, 5))
expect_type(frame, 'list')
expect_length(frame, 2)
})
test_that("plot.bindis() works as expected", {
frame <- bin_distribution(5, .5)
frame2 <- bin_distribution(6, .6)
expect_type(plot(frame), 'list')
expect_length(plot(frame), 2)
expect_length(plot(frame2), 2)
})
context('Test Binomial Package')
test_that("bin_choose() works as expected", {
expect_equal(bin_choose(5, 2), (factorial(5))/
(factorial(2) * factorial(5-2)))
expect_error(bin_choose(2, 5), "k cannot be greater than n")
expect_length(bin_choose(5, 2), 1)
})
test_that("bin_probability() works as expected", {
expect_equal(bin_probability(2, 5, .5),
bin_choose(5, 2) * .5 ** 2 * (1 - .5) ** (5 - 2))
expect_length(bin_probability(2, 5, .5), 1)
expect_length(bin_probability(0:2, 5, .5), 3)
expect_type(bin_probability(2, 5, .5), 'double')
})
test_that("bin_distribution() works as expected", {
frame <- bin_distribution(5, .5)
expect_equal(frame$success, c(0, 1, 2, 3, 4, 5))
expect_type(frame, 'list')
expect_length(frame, 2)
})
test_that("plot.bindis() works as expected", {
frame <- bin_distribution(5, .5)
frame2 <- bin_distribution(6, .6)
expect_type(plot(frame), 'list')
expect_length(plot(frame), 2)
expect_length(plot(frame2), 2)
})
test_that("bin_cumulative works as expected", {
frame <- bin_cumulative(5, .5)
expect_equal(frame$success, c(0, 1, 2, 3, 4, 5))
expect_type(frame, 'list')
expect_length(frame, 3)
})
test_that("plot.bincum() works as expected", {
frame <- bin_cumulative(5, .5)
frame2 <- bin_cumulative(6, .6)
expect_type(plot(frame), 'list')
expect_length(plot(frame), 3)
expect_length(plot(frame2), 3)
})
test_that("bin_variable() works as expected", {
expect_type(bin_variable(5, .5), 'list')
expect_length(bin_variable(5, .5), 2)
expect_equal(lst$prob, .5)
expect_equal(lst$trials, 5)
})
library(testthtat)
library('testthat')
context('Test Summary Measures')
test_that("aux_mean() works as expected", {
expect_equal(aux_mean(20, .5), 20 * .5)
expect_type(aux_mean(20, .5), 'double')
expect_length(aux_mean(20, .5), 1)
})
test_that("aux_variance() works as expected", {
expect_equal(aux_variance(20, .5), 20 * .5 * (1-.5))
expect_type(aux_variance(20, .5), 'double')
expect_length(aux_variance(20, .5), 1)
})
test_that("aux_mode() works as expected", {
expect_equal(aux_mode(19, .5), c((19 * .5 + .5),
(19 * .5 + .5 - 1)))
expect_type(aux_mode(19, .5), 'double')
expect_length(aux_mode(19, .5), 2)
expect_equal(aux_mode(20, .5), floor(20 * .5 + .5))
expect_type(aux_mode(20, .5), 'double')
expect_length(aux_mode(20, .5), 1)
})
test_that("aux_skewness() works as expected", {
expect_equal(aux_skewness(20, .5), (1-2*.5) / (sqrt(20*.5*(1-.5))))
expect_type(aux_skewness(20, .5), 'double')
expect_length(aux_variance(20, .5), 1)
})
test_that("aux_kurtosis() works as expected", {
expect_equal(aux_kurtosis(20, .5), (1 - ((6 * .5) * (1 - .5)))/
(20 * .5* (1 - .5)))
expect_type(aux_kurtosis(20, .5), 'double')
expect_length(aux_kurtosis(20, .5), 1)
})
library(testthat)
context('Test checker methods')
test_that("check_prob() works as expected", {
expect_true(check_prob(.5))
expect_length(prob, 1)
expect_error(check_prob(2), 'p has to be a number between 0 and 1')
expect_error(check_prob(-1), 'p has to be a number between 0 and 1')
})
test_that("check_trials() works as expected", {
expect_error(trials(.5), 'invalid trials value')
expect_error(trials(-1), 'invalid trials value')
expect_true(trials(4))
})
test_that("check_success() works as expected", {
expect_true(check_success(0:2, 5))
expect_error(check_success(0:6, 5), "success cannot be greater than trials")
expect_error(check_success(6, 5), "success cannot be greater than trials")
expect_error(check_success(-1, 5), "success value cannot be negative")
})
library(testtthat)
library(testthat)
context('Test Binomial Package')
test_that("bin_choose() works as expected", {
expect_equal(bin_choose(5, 2), (factorial(5))/
(factorial(2) * factorial(5-2)))
expect_error(bin_choose(2, 5), "k cannot be greater than n")
expect_length(bin_choose(5, 2), 1)
})
test_that("bin_probability() works as expected", {
expect_equal(bin_probability(2, 5, .5),
bin_choose(5, 2) * .5 ** 2 * (1 - .5) ** (5 - 2))
expect_length(bin_probability(2, 5, .5), 1)
expect_length(bin_probability(0:2, 5, .5), 3)
expect_type(bin_probability(2, 5, .5), 'double')
})
test_that("bin_distribution() works as expected", {
frame <- bin_distribution(5, .5)
expect_equal(frame$success, c(0, 1, 2, 3, 4, 5))
expect_type(frame, 'list')
expect_length(frame, 2)
})
test_that("plot.bindis() works as expected", {
frame <- bin_distribution(5, .5)
frame2 <- bin_distribution(6, .6)
expect_type(plot(frame), 'list')
expect_length(plot(frame), 2)
expect_length(plot(frame2), 2)
})
test_that("bin_cumulative works as expected", {
frame <- bin_cumulative(5, .5)
expect_equal(frame$success, c(0, 1, 2, 3, 4, 5))
expect_type(frame, 'list')
expect_length(frame, 3)
})
test_that("plot.bincum() works as expected", {
frame <- bin_cumulative(5, .5)
frame2 <- bin_cumulative(6, .6)
expect_type(plot(frame), 'list')
expect_length(plot(frame), 3)
expect_length(plot(frame2), 3)
})
test_that("bin_variable() works as expected", {
expect_type(bin_variable(5, .5), 'list')
expect_length(bin_variable(5, .5), 2)
expect_equal(lst$prob, .5)
expect_equal(lst$trials, 5)
})
test_that("print.binvar() works as expected", {
lst <- bin_variable(5, .5)
expect_equal(lst$prob, .5)
expect_equal(lst$trials, 5)
expect_type(lst, 'list')
expect_length(lst, 2)
})
test_that("summary.binvar() works as expected", {
lst <- bin_variable(5, .5)
expect_type(summary(lst), 'list')
expect_length(summary(lst), 2)
expect_equal(lst$trials, 5)
expect_equal(lst$prob, .5)
})
test_that("print.summary.binvar() works as expected", {
expect_type(summary(lst), 'list')
expect_length(summary(lst), 2)
expect_equal(lst$trials, 5)
expect_equal(lst$prob, .5)
})
test_that("bin_mean() works as expected", {
expect_equal(bin_mean(20, .5), 20 * .5)
expect_type(bin_mean(20, .5), 'double')
expect_length(bin_mean(20, .5), 1)
})
test_that("bin_variance() works as expected", {
expect_equal(bin_variance(20, .5), 20 * .5 * (1-.5))
expect_type(bin_variance(20, .5), 'double')
expect_length(bin_variance(20, .5), 1)
})
test_that("bin_mode() works as expected", {
expect_equal(bin_mode(19, .5), c((19 * .5 + .5),
(19 * .5 + .5 - 1)))
expect_type(bin_mode(19, .5), 'double')
expect_length(bin_mode(19, .5), 2)
expect_equal(bin_mode(20, .5), floor(20 * .5 + .5))
expect_type(bin_mode(20, .5), 'double')
expect_length(bin_mode(20, .5), 1)
})
test_that("bin_skewness() works as expected", {
expect_equal(bin_skewness(20, .5), (1-2*.5) / (sqrt(20*.5*(1-.5))))
expect_type(bin_skewness(20, .5), 'double')
expect_length(bin_variance(20, .5), 1)
})
test_that("bin_kurtosis() works as expected", {
expect_equal(bin_kurtosis(20, .5), (1 - ((6 * .5) * (1 - .5)))/
(20 * .5* (1 - .5)))
expect_type(bin_kurtosis(20, .5), 'double')
expect_length(bin_kurtosis(20, .5), 1)
})
library(testthat)
context('Test Summary Measures')
test_that("aux_mean() works as expected", {
expect_equal(aux_mean(20, .5), 20 * .5)
expect_type(aux_mean(20, .5), 'double')
expect_length(aux_mean(20, .5), 1)
})
test_that("aux_variance() works as expected", {
expect_equal(aux_variance(20, .5), 20 * .5 * (1-.5))
expect_type(aux_variance(20, .5), 'double')
expect_length(aux_variance(20, .5), 1)
})
test_that("aux_mode() works as expected", {
expect_equal(aux_mode(19, .5), c((19 * .5 + .5),
(19 * .5 + .5 - 1)))
expect_type(aux_mode(19, .5), 'double')
expect_length(aux_mode(19, .5), 2)
expect_equal(aux_mode(20, .5), floor(20 * .5 + .5))
expect_type(aux_mode(20, .5), 'double')
expect_length(aux_mode(20, .5), 1)
})
test_that("aux_skewness() works as expected", {
expect_equal(aux_skewness(20, .5), (1-2*.5) / (sqrt(20*.5*(1-.5))))
expect_type(aux_skewness(20, .5), 'double')
expect_length(aux_variance(20, .5), 1)
})
test_that("aux_kurtosis() works as expected", {
expect_equal(aux_kurtosis(20, .5), (1 - ((6 * .5) * (1 - .5)))/
(20 * .5* (1 - .5)))
expect_type(aux_kurtosis(20, .5), 'double')
expect_length(aux_kurtosis(20, .5), 1)
})
devtools:check()
devtools::check()
devtools:document()
devtools::document()
devtools::build_vignettes()
list("a", 1)
list("a" = c(1))
list("- trials: number of trials" = 5)
lst
summary.binvar <- function(lst){
lst$mean = aux_mean(lst$trials, lst$prob)
lst$variance = aux_variance(lst$trials, lst$prob)
lst$mode = aux_mode(lst$trials, lst$prob)
lst$skewness = aux_skewness(lst$trials, lst$prob)
lst$kurtosis = aux_kurtosis(lst$trials, lst$prob)
lst
}
cat('"Summary binomial" \n',
'\n',
'Parameters \n',
'- number of trials:', lst$trials, '\n',
'- prob of success :', lst$prob, '\n',
'\n',
'Measures \n',
'- mean     :', aux_mean(trials, prob), '\n',
'- variance :', aux_variance(trials, prob), '\n',
'- mode     :', aux_mode(trials, prob), '\n',
'- skewness :', aux_skewness(trials, prob), '\n',
'- kurtosis :', aux_kurtosis(trials, prob), '\n')
print.summary.binvar <- function(lst){
cat('"Summary binomial" \n',
'\n',
'Parameters \n',
'- number of trials:', lst$trials, '\n',
'- prob of success :', lst$prob, '\n',
'\n',
'Measures \n',
'- mean     :', aux_mean(trials, prob), '\n',
'- variance :', aux_variance(trials, prob), '\n',
'- mode     :', aux_mode(trials, prob), '\n',
'- skewness :', aux_skewness(trials, prob), '\n',
'- kurtosis :', aux_kurtosis(trials, prob), '\n')
}
print.summary.binvar <- function(lst){
cat('"Summary binomial" \n',
'\n',
'Parameters \n',
'- number of trials:', lst$trials, '\n',
'- prob of success :', lst$prob, '\n',
'\n',
'Measures \n',
'- mean     :', aux_mean(lst$trials, lst$prob), '\n',
'- variance :', aux_variance(lst$trials, lst$prob), '\n',
'- mode     :', aux_mode(lst$trials, lst$prob), '\n',
'- skewness :', aux_skewness(lst$trials, lst$prob), '\n',
'- kurtosis :', aux_kurtosis(lst$trials, lst$prob), '\n')
}
bin_mean <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
library("binomial", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::build()
devtools::document()
devtools::document()
devtools::check()
knitr::opts_chunk$set(collapse = T)
library(binomial)
knitr::opts_chunk$set(collapse = T)
library(binomial)
